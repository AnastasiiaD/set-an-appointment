{"ast":null,"code":"import _classCallCheck from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/training/new service/src/route/words/Words.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { HeaderBar } from \"../../common\";\nimport { getWords as _getWords, addWord as _addWord, removeWord as _removeWord } from \"./../../actions/wordsActions\";\nimport { Segment, Grid, Divider, Input, Container, Label, Icon, Dimmer, Loader } from \"semantic-ui-react\";\nimport { COLORS, SIZES } from \"../../constants\";\n\nvar WordsContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WordsContainer, _Component);\n\n  function WordsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, WordsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WordsContainer).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      _this.setState({\n        newWord: event.target.value\n      });\n    };\n\n    _this.handleAddWord = function (e) {\n      var newWord = _this.state.newWord;\n      if (!newWord || !newWord.trim() || e.key !== \"Enter\") return;\n\n      _this.setState({\n        isInputLoading: true\n      });\n\n      _this.props.addWord(newWord).finally(function () {\n        _this.setState({\n          newWord: \"\",\n          isInputLoading: false\n        });\n      });\n    };\n\n    _this.handleRemoveWord = function (id) {\n      _this.props.removeWord(id);\n    };\n\n    _this.state = {\n      newWord: \"\",\n      isInputLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(WordsContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getWords();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      console.info(\"componentDidUpdate\");\n      console.info(prevProps);\n      console.info(prevState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          history = _this$props.history,\n          words = _this$props.words,\n          isLoading = _this$props.isLoading;\n      var _this$state = this.state,\n          newWord = _this$state.newWord,\n          isInputLoading = _this$state.isInputLoading;\n      return React.createElement(\"section\", {\n        className: \"words-wrapper standard-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(HeaderBar, {\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(Container, {\n        text: true,\n        className: \"words-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        columns: 2,\n        relaxed: \"very\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Input, {\n        disabled: isInputLoading,\n        loading: isInputLoading,\n        className: \"word-input\",\n        icon: \"tags\",\n        iconPosition: \"left\",\n        label: {\n          tag: true,\n          content: \"Add Word\"\n        },\n        labelPosition: \"right\",\n        placeholder: \"Enter new word\",\n        value: newWord,\n        onKeyDown: this.handleAddWord,\n        onChange: function onChange(e) {\n          return _this2.handleInputChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, isLoading && React.createElement(Dimmer, {\n        active: true,\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), words.length > 0 && words.map(function (item) {\n        return React.createElement(Label, {\n          image: true,\n          key: item.id,\n          color: COLORS.TEAL,\n          size: SIZES.BIG,\n          className: \"word-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, item.name, React.createElement(Icon, {\n          name: \"delete\",\n          onClick: function onClick() {\n            return _this2.handleRemoveWord(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }));\n      }))), React.createElement(Divider, {\n        vertical: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"And\"))));\n    }\n  }]);\n\n  return WordsContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var _ref$words = _ref.words,\n      isLoading = _ref$words.isLoading,\n      words = _ref$words.words;\n  return {\n    words: words,\n    isLoading: isLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getWords: function getWords() {\n      return dispatch(_getWords());\n    },\n    addWord: function addWord(word) {\n      return dispatch(_addWord(word));\n    },\n    removeWord: function removeWord(id) {\n      return dispatch(_removeWord(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WordsContainer);","map":{"version":3,"sources":["/Users/admin/training/new service/src/route/words/Words.js"],"names":["React","Component","connect","HeaderBar","getWords","addWord","removeWord","Segment","Grid","Divider","Input","Container","Label","Icon","Dimmer","Loader","COLORS","SIZES","WordsContainer","props","handleInputChange","event","setState","newWord","target","value","handleAddWord","e","state","trim","key","isInputLoading","finally","handleRemoveWord","id","prevProps","prevState","console","info","history","words","isLoading","tag","content","length","map","item","TEAL","BIG","name","mapStateToProps","mapDispatchToProps","dispatch","word"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { HeaderBar } from \"../../common\";\nimport { getWords, addWord, removeWord } from \"./../../actions/wordsActions\";\nimport {\n    Segment,\n    Grid,\n    Divider,\n    Input,\n    Container,\n    Label,\n    Icon,\n    Dimmer,\n    Loader,\n} from \"semantic-ui-react\";\nimport { COLORS, SIZES } from \"../../constants\";\n\nclass WordsContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newWord: \"\",\n            isInputLoading: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.getWords();\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        console.info(\"componentDidUpdate\");\n        console.info(prevProps);\n        console.info(prevState);\n    }\n\n    handleInputChange = event => {\n      this.setState({\n          newWord: event.target.value\n      });\n    };\n\n    handleAddWord = e => {\n        const { newWord } = this.state;\n\n        if(!newWord || !newWord.trim() || e.key !== \"Enter\") return;\n        this.setState({isInputLoading: true});\n        this.props.addWord(newWord)\n            .finally( () => {\n                this.setState({\n                    newWord: \"\",\n                    isInputLoading: false\n                })\n            });\n    };\n\n    handleRemoveWord = id => {\n        this.props.removeWord(id);\n    };\n\n    render() {\n        const { history, words, isLoading } = this.props;\n        const { newWord, isInputLoading } = this.state;\n\n        return (\n            <section className=\"words-wrapper standard-wrapper\">\n                <HeaderBar history={history} />\n                <Container text className=\"words-container\">\n                    <Segment>\n                        <Grid columns={2} relaxed=\"very\">\n                            <Grid.Column>\n                                <Input\n                                    disabled={isInputLoading}\n                                    loading={isInputLoading}\n                                    className=\"word-input\"\n                                    icon=\"tags\"\n                                    iconPosition=\"left\"\n                                    label={{ tag: true, content: \"Add Word\" }}\n                                    labelPosition=\"right\"\n                                    placeholder=\"Enter new word\"\n                                    value={newWord}\n                                    onKeyDown={this.handleAddWord}\n                                    onChange={e => this.handleInputChange(e)}\n                                />\n                            </Grid.Column>\n                            <Grid.Column>\n                                {isLoading && (\n                                    <Dimmer active inverted>\n                                        <Loader />\n                                    </Dimmer>\n                                )}\n                                {words.length > 0 && words.map( item => (\n                                    <Label image key={item.id} color={COLORS.TEAL} size={SIZES.BIG} className=\"word-label\">\n                                        {item.name}\n                                        <Icon name=\"delete\" onClick={() => this.handleRemoveWord(item.id)}/>\n                                    </Label>\n                                ))}\n                            </Grid.Column>\n                        </Grid>\n\n                        <Divider vertical>And</Divider>\n                    </Segment>\n                </Container>\n\n            </section>\n        );\n    }\n}\n\nconst mapStateToProps = ({words: { isLoading, words }}) => ({\n    words,\n    isLoading,\n});\nconst mapDispatchToProps = dispatch => ({\n    getWords: () => dispatch(getWords()),\n    addWord: word => dispatch(addWord(word)),\n    removeWord: id => dispatch(removeWord(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WordsContainer);\n"]},"metadata":{},"sourceType":"module"}