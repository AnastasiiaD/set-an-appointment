{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/training/new service/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/training/new service/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport apiHelper from \"../utils/UiApiHelper\";\nexport var Types = {\n  START_LOADING: \"START_LOADING\",\n  STOP_LOADING: \"STOP_LOADING\",\n  ADD_WORD: \"ADD_WORD\",\n  SUCCESS_ADD_WORD: \"SUCCESS_ADD_WORD\",\n  SUCCESS_REMOVE_WORD: \"SUCCESS_REMOVE_WORD\",\n  SUCCESS_GET_WORDS: \"SUCCESS_GET_WORDS\",\n  FAIL_NOTIFICATION: \"FAIL_NOTIFICATION\",\n  DONE_NOTIFICATION: \"DONE_NOTIFICATION\"\n};\nexport var startLoading = function startLoading() {\n  return {\n    type: Types.START_LOADING\n  };\n};\nexport var stopLoading = function stopLoading() {\n  return {\n    type: Types.STOP_LOADING\n  };\n};\nexport var successGetWords = function successGetWords(words) {\n  return {\n    type: Types.SUCCESS_GET_WORDS,\n    words: words\n  };\n};\nexport var successAddWords = function successAddWords(word) {\n  return {\n    type: Types.SUCCESS_ADD_WORD,\n    word: word\n  };\n};\nexport var successRemoveWord = function successRemoveWord(id) {\n  return {\n    type: Types.SUCCESS_REMOVE_WORD,\n    id: id\n  };\n};\nexport var doneNotification = function doneNotification(msg) {\n  return {\n    type: Types.DONE_NOTIFICATION,\n    msg: msg\n  };\n};\nexport var failNotification = function failNotification(msg) {\n  return {\n    type: Types.FAIL_NOTIFICATION,\n    msg: msg\n  };\n};\nexport var getWords = function getWords() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(startLoading());\n                _context.prev = 1;\n                _context.next = 4;\n                return apiHelper.getWords();\n\n              case 4:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                dispatch(successGetWords(data.words));\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                dispatch(failNotification(\"Please try again!\"));\n                dispatch(stopLoading());\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addWord = function addWord(word) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var _ref4, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch(startLoading());\n                _context2.prev = 1;\n                _context2.next = 4;\n                return apiHelper.addWord(word);\n\n              case 4:\n                _ref4 = _context2.sent;\n                data = _ref4.data;\n                dispatch(successAddWords(data));\n                dispatch(doneNotification(\"Word successfully added!\"));\n                _context2.next = 14;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](1);\n                dispatch(failNotification(\"You already have this word in list!\"));\n                dispatch(stopLoading());\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 10]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var removeWord = function removeWord(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var _ref6, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch(startLoading());\n                _context3.prev = 1;\n                _context3.next = 4;\n                return apiHelper.removeWord(id);\n\n              case 4:\n                _ref6 = _context3.sent;\n                data = _ref6.data;\n                dispatch(successRemoveWord(id));\n                dispatch(doneNotification(data.msg));\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n                dispatch(failNotification(\"Not found word with id: \".concat(id, \"!\")));\n                dispatch(stopLoading());\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 10]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/admin/training/new service/src/actions/wordsActions.js"],"names":["apiHelper","Types","START_LOADING","STOP_LOADING","ADD_WORD","SUCCESS_ADD_WORD","SUCCESS_REMOVE_WORD","SUCCESS_GET_WORDS","FAIL_NOTIFICATION","DONE_NOTIFICATION","startLoading","type","stopLoading","successGetWords","words","successAddWords","word","successRemoveWord","id","doneNotification","msg","failNotification","getWords","dispatch","data","addWord","removeWord"],"mappings":"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","sourcesContent":["import apiHelper from \"../utils/UiApiHelper\";\n\nexport const Types = {\n    START_LOADING: \"START_LOADING\",\n    STOP_LOADING: \"STOP_LOADING\",\n\n    ADD_WORD: \"ADD_WORD\",\n    SUCCESS_ADD_WORD: \"SUCCESS_ADD_WORD\",\n    SUCCESS_REMOVE_WORD: \"SUCCESS_REMOVE_WORD\",\n\n    SUCCESS_GET_WORDS: \"SUCCESS_GET_WORDS\",\n\n    FAIL_NOTIFICATION: \"FAIL_NOTIFICATION\",\n    DONE_NOTIFICATION: \"DONE_NOTIFICATION\",\n};\n\nexport const startLoading = () => ({\n    type: Types.START_LOADING,\n});\n\nexport const stopLoading = () => ({\n    type: Types.STOP_LOADING,\n});\n\n\nexport const successGetWords = words => ({\n    type: Types.SUCCESS_GET_WORDS,\n    words,\n});\n\nexport const successAddWords = word => ({\n    type: Types.SUCCESS_ADD_WORD,\n    word\n});\n\nexport const successRemoveWord = id => ({\n    type: Types.SUCCESS_REMOVE_WORD,\n    id\n});\n\nexport const doneNotification = msg => ({\n    type: Types.DONE_NOTIFICATION,\n    msg\n});\n\nexport const failNotification = msg => ({\n    type: Types.FAIL_NOTIFICATION,\n    msg\n});\n\nexport const getWords = () => async dispatch => {\n    dispatch(startLoading());\n    try {\n        const { data } = await apiHelper.getWords();\n        dispatch(successGetWords(data.words));\n    } catch (err) {\n        dispatch(failNotification(\"Please try again!\"));\n        dispatch(stopLoading());\n    }\n};\n\nexport const addWord = word => async dispatch => {\n    dispatch(startLoading());\n    try {\n        const { data } = await apiHelper.addWord(word);\n        dispatch(successAddWords(data));\n        dispatch(doneNotification(\"Word successfully added!\"));\n    } catch (err) {\n        dispatch(failNotification(\"You already have this word in list!\"));\n        dispatch(stopLoading());\n    }\n};\n\nexport const removeWord = id => async dispatch => {\n    dispatch(startLoading());\n    try {\n        const { data } = await apiHelper.removeWord(id);\n        dispatch(successRemoveWord(id));\n        dispatch(doneNotification(data.msg));\n    } catch (err) {\n        dispatch(failNotification(`Not found word with id: ${id}!`));\n        dispatch(stopLoading());\n    }\n};"]},"metadata":{},"sourceType":"module"}