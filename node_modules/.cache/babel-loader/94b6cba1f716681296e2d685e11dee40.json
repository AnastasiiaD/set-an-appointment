{"ast":null,"code":"import _toConsumableArray from \"/Users/admin/training/get-news/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Types as ListTypes } from \"../actions/urlListActions\";\nimport { Types as StatusesTypes } from \"../actions/urlStatusesActions\";\nimport { Types as NotificationTypes } from \"../actions/notificationActions\";\nimport { Types as WordTypes } from \"../actions/wordsActions\";\nvar defaultState = {\n  notifications: []\n};\n\nvar notifications = function notifications() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case StatusesTypes.DONE_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case StatusesTypes.FAIL_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case ListTypes.REMOVE_URL_DONE_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case WordTypes.DONE_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case WordTypes.FAIL_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case ListTypes.REMOVE_URL_FAIL_NOTIFICATION:\n      return Object.assign({}, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [action.msg])\n      });\n\n    case NotificationTypes.REMOVE_LAST_NOTIFICATION:\n      var notificationsApartLast = state.notifications.slice(0, -1);\n      return Object.assign({}, {\n        notifications: notificationsApartLast\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default notifications;","map":{"version":3,"sources":["/Users/admin/training/get-news/src/reducers/notificationReducer.js"],"names":["Types","ListTypes","StatusesTypes","NotificationTypes","WordTypes","defaultState","notifications","state","action","type","DONE_NOTIFICATION","Object","assign","msg","FAIL_NOTIFICATION","REMOVE_URL_DONE_NOTIFICATION","REMOVE_URL_FAIL_NOTIFICATION","REMOVE_LAST_NOTIFICATION","notificationsApartLast","slice"],"mappings":";AAAA,SAASA,KAAK,IAAIC,SAAlB,QAAmC,2BAAnC;AACA,SAASD,KAAK,IAAIE,aAAlB,QAAuC,+BAAvC;AACA,SAASF,KAAK,IAAIG,iBAAlB,QAA2C,gCAA3C;AACA,SAASH,KAAK,IAAII,SAAlB,QAAmC,yBAAnC;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE;AADE,CAArB;;AAIA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,aAAa,CAACQ,iBAAnB;AACI,aAAOC,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAKJ,SAAKX,aAAa,CAACY,iBAAnB;AACI,aAAOH,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAIJ,SAAKZ,SAAS,CAACc,4BAAf;AACI,aAAOJ,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAKJ,SAAKT,SAAS,CAACM,iBAAf;AACI,aAAOC,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAKJ,SAAKT,SAAS,CAACU,iBAAf;AACI,aAAOH,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAKJ,SAAKZ,SAAS,CAACe,4BAAf;AACI,aAAOL,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,+BAAMC,KAAK,CAACD,aAAZ,IAA2BE,MAAM,CAACK,GAAlC;AAAd,OAFG,CAAP;;AAKJ,SAAKV,iBAAiB,CAACc,wBAAvB;AACI,UAAMC,sBAAsB,GAAGX,KAAK,CAACD,aAAN,CAAoBa,KAApB,CAA0B,CAA1B,EAA6B,CAAC,CAA9B,CAA/B;AACA,aAAOR,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACN,QAAAA,aAAa,EAAEY;AAAhB,OAFG,CAAP;;AAIJ;AACI,aAAOX,KAAP;AA3CR;AA6CH,CA9CD;;AAgDA,eAAeD,aAAf","sourcesContent":["import { Types as ListTypes } from \"../actions/urlListActions\";\nimport { Types as StatusesTypes } from \"../actions/urlStatusesActions\";\nimport { Types as NotificationTypes } from \"../actions/notificationActions\";\nimport { Types as WordTypes } from \"../actions/wordsActions\";\n\nconst defaultState = {\n    notifications: [],\n};\n\nconst notifications = (state = defaultState, action) => {\n    switch (action.type) {\n        case StatusesTypes.DONE_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n\n        case StatusesTypes.FAIL_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n        case ListTypes.REMOVE_URL_DONE_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n\n        case WordTypes.DONE_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n\n        case WordTypes.FAIL_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n\n        case ListTypes.REMOVE_URL_FAIL_NOTIFICATION:\n            return Object.assign(\n                {},\n                {notifications: [...state.notifications, action.msg]}\n            );\n\n        case NotificationTypes.REMOVE_LAST_NOTIFICATION:\n            const notificationsApartLast = state.notifications.slice(0, -1);\n            return Object.assign(\n                {},\n                {notifications: notificationsApartLast}\n            );\n        default:\n            return state;\n    }\n};\n\nexport default notifications;"]},"metadata":{},"sourceType":"module"}