{"ast":null,"code":"import _toConsumableArray from \"/Users/admin/training/get-news/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/admin/training/get-news/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Types as WordTypes } from \"../actions/wordsActions\";\nvar defaultState = {\n  isLoading: false,\n  words: []\n};\n\nvar words = function words() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case WordTypes.START_LOADING:\n      return Object.assign({}, _objectSpread({}, state), {\n        isLoading: true\n      });\n\n    case WordTypes.SUCCESS_GET_WORDS:\n      return Object.assign({}, {\n        isLoading: false\n      }, {\n        words: action.words\n      });\n\n    case WordTypes.SUCCESS_ADD_WORD:\n      return Object.assign({}, {\n        isLoading: false\n      }, {\n        words: [].concat(_toConsumableArray(state.words), [action.word])\n      });\n\n    case WordTypes.STOP_LOADING:\n      return Object.assign({}, _objectSpread({}, state), {\n        isLoading: false\n      });\n\n    case WordTypes.SUCCESS_REMOVE_WORD:\n      var filteredWords = state.words.filter(function (item) {\n        return item.id !== action.id;\n      });\n      return Object.assign({}, {\n        isLoading: false\n      }, {\n        words: filteredWords\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default words;","map":{"version":3,"sources":["/Users/admin/training/get-news/src/reducers/wordsReducer.js"],"names":["Types","WordTypes","defaultState","isLoading","words","state","action","type","START_LOADING","Object","assign","SUCCESS_GET_WORDS","SUCCESS_ADD_WORD","word","STOP_LOADING","SUCCESS_REMOVE_WORD","filteredWords","filter","item","id"],"mappings":";;AAAA,SAASA,KAAK,IAAIC,SAAlB,QAAmC,yBAAnC;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,KADM;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;;AAKA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,SAAS,CAACO,aAAf;AACI,aAAOC,MAAM,CAACC,MAAP,CACH,EADG,oBAEEL,KAFF,GAGH;AAAEF,QAAAA,SAAS,EAAE;AAAb,OAHG,CAAP;;AAKJ,SAAKF,SAAS,CAACU,iBAAf;AACI,aAAOF,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAFG,EAGH;AAAEC,QAAAA,KAAK,EAAEE,MAAM,CAACF;AAAhB,OAHG,CAAP;;AAKJ,SAAKH,SAAS,CAACW,gBAAf;AACI,aAAOH,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAFG,EAGH;AAAEC,QAAAA,KAAK,+BAAMC,KAAK,CAACD,KAAZ,IAAmBE,MAAM,CAACO,IAA1B;AAAP,OAHG,CAAP;;AAKJ,SAAKZ,SAAS,CAACa,YAAf;AACI,aAAOL,MAAM,CAACC,MAAP,CACH,EADG,oBAEEL,KAFF,GAGH;AAAEF,QAAAA,SAAS,EAAE;AAAb,OAHG,CAAP;;AAKJ,SAAKF,SAAS,CAACc,mBAAf;AACI,UAAMC,aAAa,GAAGX,KAAK,CAACD,KAAN,CAAYa,MAAZ,CAAoB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYb,MAAM,CAACa,EAAvB;AAAA,OAAxB,CAAtB;AACA,aAAOV,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAFG,EAGH;AAAEC,QAAAA,KAAK,EAAEY;AAAT,OAHG,CAAP;;AAKJ;AACI,aAAOX,KAAP;AAjCR;AAmCH,CApCD;;AAsCA,eAAeD,KAAf","sourcesContent":["import { Types as WordTypes } from \"../actions/wordsActions\";\n\nconst defaultState = {\n    isLoading: false,\n    words: [],\n};\n\nconst words = (state = defaultState, action) => {\n    switch (action.type) {\n        case WordTypes.START_LOADING:\n            return Object.assign(\n                {},\n                { ...state },\n                { isLoading: true },\n            );\n        case WordTypes.SUCCESS_GET_WORDS:\n            return Object.assign(\n                {},\n                { isLoading: false },\n                { words: action.words },\n        );\n        case WordTypes.SUCCESS_ADD_WORD:\n            return Object.assign(\n                {},\n                { isLoading: false },\n                { words: [...state.words, action.word] },\n            );\n        case WordTypes.STOP_LOADING:\n            return Object.assign(\n                {},\n                { ...state },\n                { isLoading: false },\n            );\n        case WordTypes.SUCCESS_REMOVE_WORD:\n            const filteredWords = state.words.filter( item => item.id !== action.id);\n            return Object.assign(\n                {},\n                { isLoading: false },\n                { words: filteredWords },\n            );\n        default:\n            return state;\n    }\n};\n\nexport default words;"]},"metadata":{},"sourceType":"module"}