{"ast":null,"code":"import _objectSpread from \"/Users/admin/training/get-news/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Types } from \"../actions/urlListActions\";\nvar defaultState = {\n  list: new Map(),\n  isLoading: false\n};\n\nvar urlList = function urlList() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.LOADING_LIST:\n      return Object.assign({}, _objectSpread({}, state), {\n        isLoading: true\n      });\n\n    case Types.GET_LIST_FAIL:\n      return Object.assign({}, {\n        list: null\n      }, {\n        error: true\n      }, {\n        isLoading: false\n      });\n\n    case Types.GET_LIST_SUCCESS:\n      var listMap = action.payload.list.length ? new Map(action.payload.list.map(function (item) {\n        return [item.id, _objectSpread({}, item)];\n      })) : new Map();\n      return Object.assign({}, {\n        isLoading: false\n      }, {\n        list: listMap\n      });\n\n    case Types.REMOVE_URL_SUCCESS:\n      var filteredList = new Map(state.list);\n      var id = action.id;\n\n      if (id && filteredList.has(id)) {\n        filteredList.delete(id);\n      }\n\n      return Object.assign({}, _objectSpread({}, state), {\n        list: filteredList\n      }, {\n        isLoading: false\n      });\n\n    case Types.REMOVE_URL_FAIL:\n      return Object.assign({}, _objectSpread({}, state), {\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default urlList;","map":{"version":3,"sources":["/Users/admin/training/get-news/src/reducers/urlListReducer.js"],"names":["Types","defaultState","list","Map","isLoading","urlList","state","action","type","LOADING_LIST","Object","assign","GET_LIST_FAIL","error","GET_LIST_SUCCESS","listMap","payload","length","map","item","id","REMOVE_URL_SUCCESS","filteredList","has","delete","REMOVE_URL_FAIL"],"mappings":";AAAA,SAASA,KAAT,QAAsB,2BAAtB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IAAIC,GAAJ,EADW;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAArB;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,KAAK,CAACS,YAAX;AACI,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAsBL,KAAtB,GAA8B;AAACF,QAAAA,SAAS,EAAE;AAAZ,OAA9B,CAAP;;AAEJ,SAAKJ,KAAK,CAACY,aAAX;AACI,aAAOF,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACT,QAAAA,IAAI,EAAE;AAAP,OAFG,EAGH;AAACW,QAAAA,KAAK,EAAE;AAAR,OAHG,EAIH;AAACT,QAAAA,SAAS,EAAE;AAAZ,OAJG,CAAP;;AAOJ,SAAKJ,KAAK,CAACc,gBAAX;AACI,UAAMC,OAAO,GAAGR,MAAM,CAACS,OAAP,CAAed,IAAf,CAAoBe,MAApB,GACV,IAAId,GAAJ,CAAQI,MAAM,CAACS,OAAP,CAAed,IAAf,CAAoBgB,GAApB,CAAwB,UAAAC,IAAI;AAAA,eAAK,CAACA,IAAI,CAACC,EAAN,oBAAeD,IAAf,EAAL;AAAA,OAA5B,CAAR,CADU,GAEV,IAAIhB,GAAJ,EAFN;AAIA,aAAOO,MAAM,CAACC,MAAP,CACH,EADG,EAEH;AAACP,QAAAA,SAAS,EAAE;AAAZ,OAFG,EAGH;AAACF,QAAAA,IAAI,EAAEa;AAAP,OAHG,CAAP;;AAMJ,SAAKf,KAAK,CAACqB,kBAAX;AACI,UAAMC,YAAY,GAAG,IAAInB,GAAJ,CAAQG,KAAK,CAACJ,IAAd,CAArB;AADJ,UAEYkB,EAFZ,GAEmBb,MAFnB,CAEYa,EAFZ;;AAII,UAAGA,EAAE,IAAIE,YAAY,CAACC,GAAb,CAAiBH,EAAjB,CAAT,EAA8B;AAC1BE,QAAAA,YAAY,CAACE,MAAb,CAAoBJ,EAApB;AACH;;AAED,aAAOV,MAAM,CAACC,MAAP,CACH,EADG,oBAECL,KAFD,GAGH;AAACJ,QAAAA,IAAI,EAAEoB;AAAP,OAHG,EAIH;AAAClB,QAAAA,SAAS,EAAE;AAAZ,OAJG,CAAP;;AAOJ,SAAKJ,KAAK,CAACyB,eAAX;AACI,aAAOf,MAAM,CAACC,MAAP,CACH,EADG,oBAECL,KAFD,GAGH;AAACF,QAAAA,SAAS,EAAE;AAAZ,OAHG,CAAP;;AAMJ;AACI,aAAOE,KAAP;AA9CR;AAgDH,CAjDD;;AAmDA,eAAeD,OAAf","sourcesContent":["import { Types } from \"../actions/urlListActions\";\n\nconst defaultState = {\n    list: new Map(),\n    isLoading: false,\n};\n\nconst urlList = (state = defaultState, action) => {\n    switch (action.type) {\n        case Types.LOADING_LIST:\n            return Object.assign({}, {...state}, {isLoading: true} );\n\n        case Types.GET_LIST_FAIL:\n            return Object.assign(\n                {},\n                {list: null},\n                {error: true},\n                {isLoading: false}\n            );\n\n        case Types.GET_LIST_SUCCESS:\n            const listMap = action.payload.list.length\n                ? new Map(action.payload.list.map(item => ([item.id, { ...item }])))\n                : new Map();\n\n            return Object.assign(\n                {},\n                {isLoading: false},\n                {list: listMap},\n            );\n\n        case Types.REMOVE_URL_SUCCESS:\n            const filteredList = new Map(state.list);\n            const { id } = action;\n\n            if(id && filteredList.has(id)){\n                filteredList.delete(id);\n            }\n\n            return Object.assign(\n                {},\n                {...state},\n                {list: filteredList},\n                {isLoading: false},\n            );\n\n        case Types.REMOVE_URL_FAIL:\n            return Object.assign(\n                {},\n                {...state},\n                {isLoading: false},\n            );\n\n        default:\n            return state;\n    }\n};\n\nexport default urlList;"]},"metadata":{},"sourceType":"module"}